#include <stdio.h>
#include <pthread.h>
#include <unistd.h>
 
#define PHILOSOPHERS 3
pthread_mutex_t forks[PHILOSOPHERS];
 
void* philosopher(void* num)
{
    int id = *(int*)num;
    while (1)
    {
    	pthread_mutex_lock(&forks[id]);
    	pthread_mutex_lock(&forks[(id + 1) % PHILOSOPHERS]);
    	printf("Philosopher %d is eating.\n", id);
    	sleep(1);
    	pthread_mutex_unlock(&forks[id]);
    	pthread_mutex_unlock(&forks[(id + 1) % PHILOSOPHERS]);
    	printf("Philosopher %d is thinking.\n", id);
    	sleep(1);
    }
}
int main()
{
    pthread_t philosophers[PHILOSOPHERS];
    int ids[PHILOSOPHERS];
    for (int i = 0; i < PHILOSOPHERS; i++)
    {
    	pthread_mutex_init(&forks[i], NULL);
    	ids[i] = i;
    	pthread_create(&philosophers[i], NULL, philosopher, &ids[i]);
    }
    for (int i = 0; i < PHILOSOPHERS; i++)
    {
    	pthread_join(philosophers[i], NULL);
    }
    return 0;
}
