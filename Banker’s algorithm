#include <stdio.h>
#include <stdbool.h>
 
#define P 5 // Number of processes
#define R 3 // Number of resources
 
int allocation[P][R], max[P][R], need[P][R], available[R];
 
bool isSafe() {
    int work[R], finish[P] = {0};
    for (int i = 0; i < R; i++) work[i] = available[i];
    for (int found = 1; found;) {
    	found = 0;
    	for (int p = 0; p < P; p++) {
        	if (!finish[p]) {
            	bool canAllocate = true;
            	for (int r = 0; r < R; r++)
                	if (need[p][r] > work[r]) { canAllocate = false; break; }
            	if (canAllocate) {
                	for (int r = 0; r < R; r++) work[r] += allocation[p][r];
                	finish[p] = 1;
                	found = 1;
            	}
        	}
    	}
    }
    for (int p = 0; p < P; p++) if (!finish[p]) return false;
    return true;
}
 
int main() {
    int totalResources[R] = {10, 5, 7};
    int initialAllocation[P][R] = {{0, 1, 0}, {2, 0, 0}, {3, 0, 2}, {2, 1, 1}, {0, 0, 2}};
    int maxDemand[P][R] = {{7, 5, 3}, {3, 2, 2}, {9, 0, 2}, {2, 2, 2}, {4, 3, 3}};
 
    for (int i = 0; i < P; i++)
    	for (int j = 0; j < R; j++) {
        	allocation[i][j] = initialAllocation[i][j];
        	max[i][j] = maxDemand[i][j];
        	need[i][j] = max[i][j] - allocation[i][j];
    	}
 
    for (int j = 0; j < R; j++) {
    	available[j] = totalResources[j];
    	for (int i = 0; i < P; i++) available[j] -= allocation[i][j];
    }
 
    printf("System is %s safe state.\n", isSafe() ? "in a" : "not in a");
    return 0;
}
